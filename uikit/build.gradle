apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
//apply from: '../jacoco-uikit.gradle'
//apply plugin: 'com.vanniktech.android.junit.jacoco'

group = 'com.midtrans'
version = '1.23.1'

ext {
    espressoVersion = "2.2.2"
    supporTestVersion = "0.5"
    junitVersion = "4.12"
}

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
        classpath 'com.vanniktech:gradle-android-junit-jacoco-plugin:0.4.0'

    }
}
repositories {
    jcenter()
    maven { url "http://dl.bintray.com/pt-midtrans/maven" }
}
android {
    def DEFAULT_PUBLISH
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    lintOptions {
        abortOnError false
    }
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 2
        versionName version
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        //raygun api key
//        resValue "string", "ISSUE_TRACKER_API_KEY", ISSUE_TRACKER_API_KEY
    }
    buildTypes {
        release {
            minifyEnabled true

    //        consumerProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
        debug {
            testCoverageEnabled = true
        }

    }
    flavorDimensions "midtrans"
    productFlavors {
        development {
            dimension "midtrans"
            DEFAULT_PUBLISH = "developmentRelease"
            manifestPlaceholders = [isByPassNonSsl:false]
        }

        uat {
            dimension "midtrans"
            DEFAULT_PUBLISH = "uatRelease"
            manifestPlaceholders = [isByPassNonSsl:true]
        }

        production {
            dimension "midtrans"
            DEFAULT_PUBLISH = "productionRelease"
            manifestPlaceholders = [isByPassNonSsl:false]
        }
    }

    testOptions {
        unitTests {
            all {
                // configure the test JVM arguments
                jvmArgs '-noverify'
            }
        }
    }

    defaultPublishConfig = DEFAULT_PUBLISH
    publishNonDefault true
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3' //version required
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.0.0'
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'androidx.recyclerview:recyclerview:1.0.0'
    api 'com.google.android.material:material:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    api 'ru.rambler.android:swipe-layout:1.0.14'
    api 'me.saket:better-link-movement-method:1.2'
    api 'com.github.stfalcon:smsverifycatcher:0.3.1'
    api 'com.journeyapps:zxing-android-embedded:3.5.0'
    api 'com.koushikdutta.ion:ion:3.0.8'
    api project(':issuetracker')

    implementation project(":corekit")

//    developmentApi project(path: ':corekit', configuration: 'developmentRelease')
//    uatApi project(path: ':corekit', configuration: 'uatRelease')
//    productionApi project(path: ':corekit', configuration: 'productionRelease')

    /*
     * test dependencies
     */

    // Android JUnit Runner
    androidTestImplementation 'androidx.test:runner:1.1.0'

    testImplementation 'junit:junit:4.12'

    testImplementation 'org.mockito:mockito-core:1.10.19'

    testImplementation('org.powermock:powermock-api-mockito:1.6.6') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation('org.powermock:powermock-module-junit4:1.6.6') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }

    testImplementation('org.powermock:powermock-api-mockito:1.6.6') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation('org.powermock:powermock-module-junit4-rule:1.6.6') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }

    testImplementation('org.powermock:powermock-classloading-xstream:1.6.6') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }

    androidTestImplementation('org.powermock:powermock-mockito-release-full:1.6.4') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
}

//publishing {
//    publications {
//        BintrayPublication(MavenPublication) {
//            artifact(sourceJar)
//            artifact("$buildDir/outputs/aar/uikit-development-release.aar")
//            groupId group
//            artifactId 'uikit'
//            version version + "-SANDBOX"
//
//            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
//            pom.withXml {
//                def dependenciesNode = asNode().appendNode('dependencies')
//
//                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
//                configurations.compile.allDependencies.each {
//                    def dependencyNode = dependenciesNode.appendNode('dependency')
//                    dependencyNode.appendNode('groupId', it.group)
//                    dependencyNode.appendNode('artifactId', it.name)
//                    dependencyNode.appendNode('version', it.version)
//                }
//
//                configurations.developmentCompile.allDependencies.each {
//                    def dependencyNode = dependenciesNode.appendNode('dependency')
//                    dependencyNode.appendNode('groupId', it.group)
//                    dependencyNode.appendNode('artifactId', it.name)
//                    dependencyNode.appendNode('version', it.version + '-SANDBOX')
//                }
//            }
//        }
//
//        BintrayUatPublication(MavenPublication) {
//            artifact(sourceJar)
//            artifact("$buildDir/outputs/aar/uikit-uat-release.aar")
//            groupId group
//            artifactId 'uikit'
//            version version + "-UAT"
//
//            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
//            pom.withXml {
//                def dependenciesNode = asNode().appendNode('dependencies')
//
//                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
//                configurations.compile.allDependencies.each {
//                    def dependencyNode = dependenciesNode.appendNode('dependency')
//                    dependencyNode.appendNode('groupId', it.group)
//                    dependencyNode.appendNode('artifactId', it.name)
//                    dependencyNode.appendNode('version', it.version)
//                }
//
//                configurations.uatCompile.allDependencies.each {
//                    def dependencyNode = dependenciesNode.appendNode('dependency')
//                    dependencyNode.appendNode('groupId', it.group)
//                    dependencyNode.appendNode('artifactId', it.name)
//                    dependencyNode.appendNode('version', it.version + '-UAT')
//                }
//            }
//        }
//
//        BintrayProductionPublication(MavenPublication) {
//            artifact(sourceJar)
//            artifact("$buildDir/outputs/aar/uikit-production-release.aar")
//            groupId group
//            artifactId 'uikit'
//            version version
//
//            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
//            pom.withXml {
//                def dependenciesNode = asNode().appendNode('dependencies')
//
//                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
//                configurations.compile.allDependencies.each {
//                    def dependencyNode = dependenciesNode.appendNode('dependency')
//                    dependencyNode.appendNode('groupId', it.group)
//                    dependencyNode.appendNode('artifactId', it.name)
//                    dependencyNode.appendNode('version', it.version)
//                }
//
//                configurations.productionCompile.allDependencies.each {
//                    def dependencyNode = dependenciesNode.appendNode('dependency')
//                    dependencyNode.appendNode('groupId', it.group)
//                    dependencyNode.appendNode('artifactId', it.name)
//                    dependencyNode.appendNode('version', it.version)
//                }
//            }
//        }
//    }
//}
//
//bintray {
//    user = System.getenv('BINTRAY_USER')
//    key = System.getenv('BINTRAY_KEY')
//    configurations = ['archives']
//    pkg {
//        repo = 'maven'
//        name = project.name
//        userOrg = 'pt-midtrans'
//        licenses = ['Apache-2.0']
//        vcsUrl = 'https://github.com/veritrans/veritrans-android.git'
//        desc = 'Android SDK for integrating with midtrans.com'
//        websiteUrl = "https://midtrans.com"
//        publish = true
//        publicDownloadNumbers = true
//    }
//    publications = ['BintrayProductionPublication', 'BintrayPublication']
//
//}
